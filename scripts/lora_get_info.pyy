import os
import json
import requests

url_dict = {
    "modelPage":"https://civitai.com/models/",
    "modelId": "https://civitai.com/api/v1/models/",
    "modelVersionId": "https://civitai.com/api/v1/model-versions/",
    "hash": "https://civitai.com/api/v1/model-versions/by-hash/"
}

def_headers = {'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148',
               "Authorization": ""}

# 定義目標文件夾
target_directory = "E:\\Lora"

# 選擇您感興趣的特定副檔名（例如 .txt 或 .jpg）
specific_extensions = {".safetensors"}  # 替換為您想要的副檔名

# write model info to file
def write_model_info(path, model_info):
    print("Write model info to file: " + path)
    with open(os.path.realpath(path), 'w') as f:
        f.write(json.dumps(model_info, indent=4))

def get_version_info_by_version_id(id:str) -> dict:
    print("Request version info from civitai")

    if not id:
        print("id is empty")
        return

    r = requests.get(url_dict["modelVersionId"]+str(id), headers=def_headers)
    if not r.ok:
        if r.status_code == 404:
            # this is not a civitai model
            print("Civitai does not have this model version")
            return {}
        else:
            print("Get error code: " + str(r.status_code))
            print(r.text)
            return

    # try to get content
    content = None
    try:
        content = r.json()
    except Exception as e:
        print("Parse response json failed")
        print(str(e))
        print("response:")
        print(r.text)
        return
    
    if not content:
        print("error, content from civitai is None")
        return
    
    return content

def get_version_info_by_model_id(id:str) -> dict:

    model_info = get_model_info_by_id(id)
    if not model_info:
        print(f"Failed to get model info by id: {id}")
        return
    
    # check content to get version id
    if "modelVersions" not in model_info.keys():
        print("There is no modelVersions in this model_info")
        return
    
    if not model_info["modelVersions"]:
        print("modelVersions is None")
        return
    
    if len(model_info["modelVersions"])==0:
        print("modelVersions is Empty")
        return
    
    def_version = model_info["modelVersions"][0]
    if not def_version:
        print("default version is None")
        return
    
    if "id" not in def_version.keys():
        print("default version has no id")
        return
    
    version_id = def_version["id"]
    
    if not version_id:
        print("default version's id is None")
        return

    # get version info
    version_info = get_version_info_by_version_id(str(version_id))
    if not version_info:
        print(f"Failed to get version info by version_id: {version_id}")
        return

    return version_info

def get_model_info_by_id(id:str) -> dict:
    print("Request model info from civitai")

    if not id:
        print("id is empty")
        return

    r = requests.get(url_dict["modelId"]+str(id), headers=def_headers)
    if not r.ok:
        if r.status_code == 404:
            # this is not a civitai model
            print("Civitai does not have this model")
            return {}
        else:
            print("Get error code: " + str(r.status_code))
            print(r.text)
            return

    # try to get content
    content = None
    try:
        content = r.json()
    except Exception as e:
        print("Parse response json failed")
        print(str(e))
        print("response:")
        print(r.text)
        return
    
    if not content:
        print("error, content from civitai is None")
        return
    
    return content

def load_model_info(path):
    # print("Load model info from file: " + path)
    model_info = None
    with open(os.path.realpath(path), 'r') as f:
        try:
            model_info = json.load(f)
        except Exception as e:
            print("Selected file is not json: " + path)
            print(e)
            return
        
    return model_info

# 篩選出特定副檔名的檔案
for root, dirs, files in os.walk(target_directory):
    results = []
    if(dirs == []):
        print(f"{root} {dirs}")
        for file in files:
            file_path = os.path.join(root, file)
            # 提取檔案副檔名
            file_name = os.path.splitext(file)[0]
            file_name = file_name.replace(".safetensors", "")
            file_extension = os.path.splitext(file)[1]
            # 選擇您感興趣的特定副檔名（例如 .txt 或 .jpg）
            if file_extension in specific_extensions:
                if not os.path.exists(root+"\\"+file_name+".civitai.info.model"):
                    model_info = load_model_info(root+"\\"+file_name+".civitai.info")
                    write_model_info(root+"\\"+file_name+".civitai.info.model", get_model_info_by_id(model_info["modelId"]))
                    print(file_name)
                #if os.path.exists(root+"\\"+file_name+".civitai.info.model"):
                #    try:
                #        model_info = load_model_info(root+"\\"+file_name+".civitai.info.model")
                #        if "id" in model_info:
                #            model_info = load_model_info(root+"\\"+file_name+".civitai.info")
                #            write_model_info(root+"\\"+file_name+".civitai.info.model", get_model_info_by_id(model_info["modelId"]))
                #            print(file_name)
                #        else:
                #            write_model_info(root+"\\"+file_name+".civitai.info.model", get_model_info_by_id(model_info["id"]))
                #            write_model_info(root+"\\"+file_name+".civitai.info", get_version_info_by_model_id(model_info["id"]))
                #            print(file_name)
                #    except Exception as e:
                #        print(str(e))