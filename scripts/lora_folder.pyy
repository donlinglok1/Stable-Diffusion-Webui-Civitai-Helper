import os
import json
from transformers import pipeline
model_name = "yuvalkirstain/PickScore_v1"
classifier = pipeline("zero-shot-image-classification", model = model_name)
nsfw_labels = [
            "nipples",
            "pussy",
            "penis",
            "nude",
            ]
real_labels = [
            'photorealistic',
            'anime',
            ]

pony_tags = ['Pony']
xl_tags = ['SDXL 0.9','SDXL 1.0','SDXL 1.0 LCM','SDXL Distilled','SDXL Turbo']
ani_tags = [
    'anime', 
    'video game', 
    'fgo', 
    '3d',
    'blue archive'
    ]
real_tags = [
    'photorealistic',
    'realistic', 
    'pornstar',
    'photography', 
    'photorealism',
    ]
Character_tags = [
    'character', 
    'celebrity', 
    'characters', 
    'video game',
    'blue archive',
    'female',
    'woman',
    ]
Concept_tags = [
    'concept',
    'poses',
    'action'
    ]
Costume_tags = [
    'clothing',
    'dress'
    ]
Sex_tags = [
    'porn',
    'nsfw',
    'hentai',
    "nipples",
    "pussy",
    "penis",
    "nude",
    ]
Style_tags = [
    'style'
    ]

source_folders = [
    #"D:\\Lora", 
    "E:\\Lora"
]
search_extensions = ".safetensors"

def move(source_path,target_path):
    try:
        # 移動檔案
        os.replace(source_path, target_path)  # 或者使用 os.replace() 來覆蓋目標位置的檔案
    except FileNotFoundError:
        print(f"找不到原始檔案：{source_path}")
    except Exception as e:
        print(f"移動檔案時發生錯誤：{e}")

def process_file(file,source_folder):
    file_name = os.path.splitext(file)[0].replace(search_extensions, "")
    file_extension = os.path.splitext(file)[1]
    if file_extension == search_extensions:
        info_path = root+"\\"+file_name+".civitai.info.model"
        file_stats = os.stat(root+"\\"+file_name+".civitai.info.model")
        if len(info_path) != 0:
            info_path = root+"\\"+file_name+".civitai.info"
        try:    
            with open(info_path, "r", encoding="utf-8") as file:
                file_content = file.read()

            #print(file_content)
            data = json.loads(file_content)
            if len(data) != 0:
                if "modelVersions" in data and "baseModel" in data["modelVersions"][0]:
                    baseModelValue = data["modelVersions"][0]["baseModel"]
                elif "baseModel" in data:
                    baseModelValue = data["baseModel"]
                print(baseModelValue)
        
                lora_cat = ""
                if "tags" in data:
                    keywordValue = data["tags"]
                    isPony = False
                    if baseModelValue in pony_tags:
                        lora_cat += "\\pony"
                        isPony = True
                    elif baseModelValue in xl_tags:
                        lora_cat += "\\xl"

                            
                elif "trainedWords" in data:
                    keywordValue = data["trainedWords"]
                    isPony = False
                    if baseModelValue in pony_tags:
                        lora_cat += "\\pony"
                        isPony = True
                    elif baseModelValue in xl_tags:
                        lora_cat += "\\xl"

                isAniOrRealDone = False
                for tag in keywordValue:
                    if tag in real_tags and isAniOrRealDone == False:
                        lora_cat += "\\real"
                        isAniOrRealDone = True
                    elif tag in ani_tags and isAniOrRealDone == False:
                        lora_cat += "\\ani"
                        isAniOrRealDone = True
                
                if isAniOrRealDone == False:
                    print(keywordValue)
                    isMan = "\\man"
                    try:
                        score_json = classifier(f"{root}\\{file_name}.preview.png", candidate_labels = real_labels)
                        print(score_json)
                        if score_json[0]['label'] == "anime":
                            isMan = "\\ani"
                        if score_json[0]['label'] == "photorealistic":
                            isMan = "\\real"
                    except Exception as e:
                        print(f"{e}")
                    lora_cat += isMan
                    isAniOrRealDone = True

                isTypeDone = False
                for tag in keywordValue:
                    if tag in Character_tags and isTypeDone == False:
                        lora_cat += "\\Character"
                        isTypeDone = True
                    if tag in Concept_tags and isTypeDone == False:
                        lora_cat += "\\Concept"
                        isTypeDone = True
                    if tag in Costume_tags and isTypeDone == False:
                        lora_cat += "\\Costume"
                        isTypeDone = True
                    if tag in Sex_tags and isTypeDone == False:
                        lora_cat += "\\Sex"
                        isTypeDone = True
                    if tag in Style_tags and isTypeDone == False:
                        lora_cat += "\\Style"
                        isTypeDone = True
                
                if "nsfw" in data and data["nsfw"] == True:
                    lora_cat += "\\nsfw"
                else:
                    try:
                        score_json = classifier(f"{root}\\{file_name}.preview.png", candidate_labels = nsfw_labels)
                        if score_json[0]['score'] > 0.5:
                            print(score_json[0])
                            lora_cat += "\\nsfw"
                    except Exception as e:
                        print(f"{e}")

                new = f"{source_folder}{lora_cat}\\{file_name}"
                print(new)

                if not os.path.exists(os.path.dirname(new)):
                    try:
                        os.makedirs(os.path.dirname(new))
                    except OSError as exc: # Guard against race condition
                        if exc.errno != errno.EEXIST:
                            raise

                if f"{root}\\{file_name}.safetensors" != f"{new}.safetensors":
                    move(f"{root}\\{file_name}.civitai.info",f"{new}.civitai.info")
                    move(f"{root}\\{file_name}.civitai.info.model",f"{new}.civitai.info.model")
                    move(f"{root}\\{file_name}.preview.png",f"{new}.preview.png")
                    move(f"{root}\\{file_name}.safetensors",f"{new}.safetensors")
        except Exception as e:
            print(f"{e}")

for source_folder in source_folders:
    for root, dirs, files in os.walk(source_folder):
        for file in files:
            process_file(file, source_folder)
        break
